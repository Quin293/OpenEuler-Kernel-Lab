  // 1. kernel/sched/sched.h
  struct rt_rq {
  
  struct sched_rt_entity *last_enq_se;  // 新加字段
  int                     last_enq_prio; // 新加字段
  
  }
  
  // 2. kernel/sched/rt.c
  void init_rt_rq()
  {
  /* ... */
  
  /* delimiter for bitsearch: */
  __set_bit(MAX_RT_PRIO, array->bitmap);
  // 该行以上保持不变
     rt_rq->last_enq_se = NULL; // 初始化last_enq_se为NULL
     rt_rq->last_enq_prio = 0;  // 初始化last_enq_prio为0
  }
  
  
  
  // 3. kernel/sched/rt.c
static void __enqueue_rt_entity(struct sched_rt_entity *rt_se, unsigned int flags)
{
	struct rt_rq *rt_rq = rt_rq_of_se(rt_se);
	struct rt_prio_array *array = &rt_rq->active;
	struct rt_rq *group_rq = group_rt_rq(rt_se);
	struct list_head *queue = array->queue + rt_se_prio(rt_se);
        struct sched_rt_entity *last_se = rt_rq->last_enq_se;//添加代码2

	/*
	 * Don't enqueue the group if its throttled, or when empty.
	 * The latter is a consequence of the former when a child group
	 * get throttled and the current group doesn't have any other
	 * active members.
	 */
	if (group_rq && (rt_rq_throttled(group_rq) || !group_rq->rt_nr_running)) {
		if (rt_se->on_list)
			__delist_rt_entity(rt_se, array);
		return;
	}


	if (move_entity(flags)) {
		WARN_ON_ONCE(rt_se->on_list);
		if (flags & ENQUEUE_HEAD)
			list_add(&rt_se->run_list, queue);
		else if (last_se && last_se->on_list == 1) {
			list_add(&rt_se->run_list, &last_se->run_list);
		}else {
			list_add_tail(&rt_se->run_list, queue);
		}//添加代码3
		__set_bit(rt_se_prio(rt_se), array->bitmap);
		rt_se->on_list = 1;
	}
	rt_se->on_rq = 1;

	
	inc_rt_tasks(rt_se, rt_rq);

	rt_rq->last_enq_se = rt_se;
	rt_rq->last_enq_prio = rt_se_prio(rt_se);//更新last_enq_se及其优先级
}
